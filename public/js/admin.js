let btn = document.querySelector("#btn");

let sidebar = document.querySelector(".sidebar");



btn.onclick = function() {

    console.time("Toggle Sidebar");

    sidebar.classList.toggle("active");



        console.timeEnd("Toggle Sidebar");

}


document.addEventListener("DOMContentLoaded", function () {
    let menuItems = document.querySelectorAll(".nav_list li a");
    let sections = {};
    const sectionIds = {
        "Th√¥ng tin c√° nh√¢n": "infoManagement",
        "Th√¥ng tin nh√† b√°o": "info-nhabao-Management",
        "Danh s√°ch b√†i vi·∫øt": "statistic-nhabao-Management",
        "Th√™m b√†i b√°o": "addPostManagement",
        "Th·ªëng k√™ d·ªØ li·ªáu": "staticManagement",
        "Qu·∫£n l√Ω b√†i vi·∫øt": "postManagement",
        "Qu·∫£n l√Ω danh m·ª•c": "categoryManagement",
        "Qu·∫£n l√Ω ng∆∞·ªùi d√πng": "userManagement",
        "Qu·∫£n l√Ω b√¨nh lu·∫≠n": "commentManagement",
    };

    for (const [key, id] of Object.entries(sectionIds)) {
        const element = document.getElementById(id);
        if (element) {
            sections[key] = element;
        }
    }

    menuItems.forEach(item => {
        item.addEventListener("click", function (e) {
            e.preventDefault();

            let menuName = this.querySelector(".links_name").innerText;

            // Ki·ªÉm tra n·∫øu ph·∫ßn t·ª≠ kh√¥ng t·ªìn t·∫°i
            if (!sections[menuName]) {
                console.warn(`Section for menu "${menuName}" does not exist.`);
                return;
            }

            // ·∫®n t·∫•t c·∫£ c√°c ph·∫ßn n·ªôi dung
            Object.values(sections).forEach(section => {
                if (section) section.style.display = "none";
            });

            // Hi·ªÉn th·ªã n·ªôi dung c·ªßa menu v·ª´a nh·∫•n
            sections[menuName].style.display = "block";

            // X√≥a 'active' kh·ªèi t·∫•t c·∫£ menu
            menuItems.forEach(link => link.parentElement.classList.remove("active"));

            // ƒê√°nh d·∫•u menu ƒë∆∞·ª£c ch·ªçn l√† 'active'
            this.parentElement.classList.add("active");
        });
    });

    // TAB info_management (bao g·ªìm c·∫£ c√°c m·ª•c th·ªëng k√™ nh√† b√°o)
    const allTabs = document.querySelectorAll('.info_management-tab');
    const allTabContents = document.querySelectorAll('.info_management-tab-content');
    allTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            // L·∫•y group tab cha g·∫ßn nh·∫•t
            const parent = this.closest('.info_management-side');
            const tabs = parent.querySelectorAll('.info_management-tab');
            const tabContents = parent.querySelectorAll('.info_management-tab-content');
            tabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            tabContents.forEach(content => content.style.display = 'none');
            const tabId = this.dataset.tab;
            if(tabId) parent.querySelector(`#${tabId}`).style.display = 'block';
        });
    });

    // CRUD m·∫´u cho B√†i vi·∫øt y√™u th√≠ch
    let favoriteArticles = [
        {id: 1, title: 'B√†i vi·∫øt A', author: 'T√°c gi·∫£ 1', date: '2024-06-01'},
        {id: 2, title: 'B√†i vi·∫øt B', author: 'T√°c gi·∫£ 2', date: '2024-06-02'}
    ];
    function renderFavoriteArticles() {
        const tbody = document.getElementById('favoriteArticlesBody');
        tbody.innerHTML = favoriteArticles.map(a => `
            <tr>
                <td>${a.id}</td>
                <td>${a.title}</td>
                <td>${a.author}</td>
                <td>${a.date}</td>
                <td>
                    <button class=\"info_management-action-btn\" onclick=\"deleteFavoriteArticle(${a.id})\">X√≥a</button>
                </td>
            </tr>
        `).join('');
    }
    window.deleteFavoriteArticle = function(id) {
        favoriteArticles = favoriteArticles.filter(a => a.id !== id);
        renderFavoriteArticles();
    }
    renderFavoriteArticles();

    // CRUD m·∫´u cho B√¨nh lu·∫≠n c·ªßa t√¥i
    let myComments = [
        {id: 1, post: 'B√†i vi·∫øt A', content: 'B√¨nh lu·∫≠n 1', date: '2024-06-01'},
        {id: 2, post: 'B√†i vi·∫øt B', content: 'B√¨nh lu·∫≠n 2', date: '2024-06-02'}
    ];
    function renderMyComments() {
        const tbody = document.getElementById('myCommentsBody');
        tbody.innerHTML = myComments.map(c => `
            <tr>
                <td>${c.id}</td>
                <td>${c.post}</td>
                <td>${c.content}</td>
                <td>${c.date}</td>
                <td>
                    <button class=\"info_management-action-btn\" onclick=\"deleteMyComment(${c.id})\">X√≥a</button>
                </td>
            </tr>
        `).join('');
    }
    window.deleteMyComment = function(id) {
        myComments = myComments.filter(c => c.id !== id);
        renderMyComments();
    }
    renderMyComments();

    // CRUD m·∫´u cho B√¨nh lu·∫≠n y√™u th√≠ch
    let favoriteComments = [
        {id: 1, post: 'B√†i vi·∫øt A', content: 'B√¨nh lu·∫≠n hay', date: '2024-06-01'},
        {id: 2, post: 'B√†i vi·∫øt B', content: 'B√¨nh lu·∫≠n xu·∫•t s·∫Øc', date: '2024-06-02'}
    ];
    function renderFavoriteComments() {
        const tbody = document.getElementById('favoriteCommentsBody');
        tbody.innerHTML = favoriteComments.map(c => `
            <tr>
                <td>${c.id}</td>
                <td>${c.post}</td>
                <td>${c.content}</td>
                <td>${c.date}</td>
                <td>
                    <button class=\"info_management-action-btn\" onclick=\"deleteFavoriteComment(${c.id})\">X√≥a</button>
                </td>
            </tr>
        `).join('');
    }
    window.deleteFavoriteComment = function(id) {
        favoriteComments = favoriteComments.filter(c => c.id !== id);
        renderFavoriteComments();
    }
    renderFavoriteComments();

    // D·ªØ li·ªáu m·∫´u cho Th·ªëng k√™ b√†i vi·∫øt c·ªßa t√¥i
    let statisticMyArticles = [
        {id: 1, title: 'B√†i vi·∫øt A', views: 120, likes: 10, date: '2024-06-01', status: 'ƒê√£ duy·ªát'},
        {id: 2, title: 'B√†i vi·∫øt B', views: 80, likes: 5, date: '2024-06-02', status: 'Ch·ªù duy·ªát'}
    ];
    function renderStatisticMyArticles() {
        const tbody = document.getElementById('statisticMyArticlesBody');
        if (!tbody) return;
        tbody.innerHTML = statisticMyArticles.map(a => `
            <tr>
                <td>${a.id}</td>
                <td>${a.title}</td>
                <td>${a.views}</td>
                <td>${a.likes}</td>
                <td>${a.date}</td>
                <td>${a.status}</td>
            </tr>
        `).join('');
    }
    renderStatisticMyArticles();

    // D·ªØ li·ªáu m·∫´u cho Th√¥ng b√°o b√†i vi·∫øt ƒë∆∞·ª£c duy·ªát
    let statisticApproveNotify = [
        'B√†i vi·∫øt "B√†i vi·∫øt A" ƒë√£ ƒë∆∞·ª£c duy·ªát ng√†y 2024-06-01',
        'B√†i vi·∫øt "B√†i vi·∫øt B" ƒë√£ ƒë∆∞·ª£c duy·ªát ng√†y 2024-06-02'
    ];
    function renderStatisticApproveNotify() {
        const ul = document.getElementById('statisticApproveNotifyList');
        if (!ul) return;
        ul.innerHTML = statisticApproveNotify.map(n => `<li>${n}</li>`).join('');
    }
    renderStatisticApproveNotify();

    // D·ªØ li·ªáu m·∫´u cho Th·ªëng k√™ t·ªïng quan c·ªßa nh√† b√°o
    let statisticOverview = {
        totalArticles: 12,
        totalViews: 3456,
        totalLikes: 234,
        totalComments: 78
    };
    function renderStatisticOverview() {
        if(document.getElementById('statisticTotalArticles'))
            document.getElementById('statisticTotalArticles').innerText = statisticOverview.totalArticles;
        if(document.getElementById('statisticTotalViews'))
            document.getElementById('statisticTotalViews').innerText = statisticOverview.totalViews;
        if(document.getElementById('statisticTotalLikes'))
            document.getElementById('statisticTotalLikes').innerText = statisticOverview.totalLikes;
        if(document.getElementById('statisticTotalComments'))
            document.getElementById('statisticTotalComments').innerText = statisticOverview.totalComments;
    }
    renderStatisticOverview();



    // Code ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n
    const changePasswordButton = document.getElementById("info_management-change-password");
    const passwordInput = document.getElementById("info_management-password");
    const usernameInput = document.getElementById("info_management-name");
    const saveBtn = document.getElementById("info_management-edit-name");

    // H√†m ki·ªÉm tra gi√° tr·ªã c·ªßa c√°c input
    function toggleSaveButton() {
        if (passwordInput.value.trim() === "" || usernameInput.value.trim() === "") {
            saveBtn.style.display = "none"; // ·∫®n n√∫t Save n·∫øu c·∫£ hai input tr·ªëng
        } else {
            saveBtn.style.display = "block"; // Hi·ªÉn th·ªã n√∫t Save n·∫øu c√≥ d·ªØ li·ªáu
        }
    }

    if (changePasswordButton && passwordInput && usernameInput && saveBtn) {
        // S·ª± ki·ªán click ƒë·ªÉ b·∫≠t/t·∫Øt tr·∫°ng th√°i disabled
        changePasswordButton.addEventListener("click", function () {
            const isDisabled = passwordInput.disabled && usernameInput.disabled;
            passwordInput.disabled = !passwordInput.disabled;
            usernameInput.disabled = !usernameInput.disabled;

            // Thay ƒë·ªïi thu·ªôc t√≠nh type c·ªßa passwordInput
            if (!passwordInput.disabled) {
                passwordInput.type = "text"; // Hi·ªÉn th·ªã m·∫≠t kh·∫©u
            } else {
                passwordInput.type = "password"; // ·∫®n m·∫≠t kh·∫©u
            }

            // Thay ƒë·ªïi giao di·ªán n√∫t
            if (isDisabled) {
                changePasswordButton.innerText = "üîì"; // Bi·ªÉu t∆∞·ª£ng m·ªü kh√≥a
            } else {
                changePasswordButton.innerText = "üîë"; // Bi·ªÉu t∆∞·ª£ng kh√≥a
            }

            // Ki·ªÉm tra gi√° tr·ªã input khi b·∫≠t/t·∫Øt
            toggleSaveButton();
        });

        // S·ª± ki·ªán input ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã khi ng∆∞·ªùi d√πng nh·∫≠p
        passwordInput.addEventListener("input", toggleSaveButton);
        usernameInput.addEventListener("input", toggleSaveButton);
    }

});








